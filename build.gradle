buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
	baseName = 'facturacion'
	version = '1.0.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

bootRepackage {
    withJarTask = jar
}

sourceSets {
    main
    test
    generated
}

project.ext.gatlingVersion = "2.2.4"
project.ext.scalaVersion = "2.11.7";

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.mobile:spring-mobile-device')

	compile('org.springframework.security.oauth:spring-security-oauth2')

	compile('io.jsonwebtoken:jjwt:0.6.0')
	compile('org.springframework.boot:spring-boot-starter-activemq')
	compile('org.apache.activemq:activemq-broker')

    compile('com.querydsl:querydsl-jpa:4.1.3')
    compile('com.querydsl:querydsl-apt:4.1.3:jpa')
	runtime('org.hsqldb:hsqldb')
	testCompile('org.springframework.boot:spring-boot-starter-test')

	testCompile("org.scala-lang:scala-library:${scalaVersion}")
    testCompile("io.gatling:gatling-app:${gatlingVersion}")
    testCompile("io.gatling.highcharts:gatling-charts-highcharts:${gatlingVersion}")
}

def generatedSrcDir = "src/generated/java"
task createGeneratedSrcDir << {
    file(generatedSrcDir).mkdirs()
}
compileJava.dependsOn createGeneratedSrcDir

compileJava {
    options.compilerArgs << "-processor" << "com.querydsl.apt.jpa.JPAAnnotationProcessor" << "-s" << file(generatedSrcDir).absolutePath
}

clean {
    delete fileTree(dir:generatedSrcDir,exclude: ".gitignore")
}

eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task copyFront(type: Copy) {
    from('frontend/dist')
    into('build/resources/main/static')
    include('**/*.*')

    outputs.upToDateWhen { false } // Always run
}

task runLoadTest(type: JavaExec) {
  dependsOn testClasses
  description = "load test with Gatling"
  group = "Load Test"
  classpath = sourceSets.test.runtimeClasspath
  main = "io.gatling.app.Gatling"
  args = [
          "--simulation", "com.facturacion.loadtest.ListingTest",
          "--results-folder", "${buildDir}/reports/gatling"
  ]
}

jar.dependsOn copyFront
